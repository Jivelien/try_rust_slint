struct TileData {
    image: image,
    image_visible: bool,
    solved: bool,
}

component MemoryTile inherits Rectangle {
    callback clicked;
    in property <bool> open_curtain;
    in property <bool> solved;
    in property <image> icon;

    height: 64px;
    width: 64px;
    background: solved ? #34CE57 : #3960D5;
    animate background { duration: 800ms; }

    Image {
        source: icon;
        width: parent.width;
        height: parent.height;
    }

    Rectangle {
        background: #193076;
        x: 0px;
        y: 0px;
        width: parent.width; 
        height: open_curtain ? 0px : (parent.height);
        animate height { duration: 250ms; easing: ease-in; }
    }

    TouchArea {
        clicked => {
            // Delegate to the user of this element
            root.clicked();
        }
    }
}

export component MainWindow inherits Window {
    width: 326px;
    height: 326px;
    
    callback check_if_pair_solved();
    in property <bool> disable_tiles; 
        
    in property <[TileData]> memory_tiles: [
        { image: @image-url("icons/at.png") },
        { image: @image-url("icons/balance-scale.png") },
        { image: @image-url("icons/bicycle.png") },
        { image: @image-url("icons/bus.png") },
        { image: @image-url("icons/cloud.png") },
        { image: @image-url("icons/cogs.png") },
        { image: @image-url("icons/motorcycle.png") },
        { image: @image-url("icons/video.png") },
    ];
        for tile[i] in memory_tiles : MemoryTile {
            x: mod(i, 4) * 80px;
            y: floor(i / 4) * 80px;
            width: 75px;
            height: 75px;
            icon: tile.image;
            open_curtain: tile.image_visible || tile.solved;
            solved: tile.solved;
            clicked => {
                if (!root.disable_tiles) {
                    tile.image_visible = true;
                    root.check_if_pair_solved();
                }
            }
        }
}